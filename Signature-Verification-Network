{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.mlab as mlab\n",
    "import cv2\n",
    "import math\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# height and width of images\n",
    "img_width,img_height = 150,150  \n",
    "#increasing these variables increases quality and size of image\n",
    "dim = (img_width, img_height)\n",
    "\n",
    "# location of locally saved dataset\n",
    "loc= \"E:/Code data/Signatures/Dataset_Signature_Final/Dataset/\"\n",
    "\n",
    "# helper function to return black and white image ndarray on giving location\n",
    "def returnimages(path,img):\n",
    "    image=cv2.imread(path+\"/\"+ img)                  #bringing the image\n",
    "    image=cv2.resize(image, (img_width, img_height))\n",
    "    image=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "    image = image/255\n",
    "    return image\n",
    "\n",
    "def flatten(img):return img.reshape((img.size, 1))   # flatten numpy array of floats to 1d "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1d672f17d08>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "testimage = returnimages(loc+'dataset1/forge',\"02100002.png\")\n",
    "plt.imshow(testimage,'gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# real signatures 1d array\n",
    "real_sign = np.ndarray((210,img_width*img_height,1))\n",
    "forged_sign = np.ndarray((210,img_width*img_height,1))\n",
    "count_real =0\n",
    "count_forged = 0\n",
    "# importing 60 real signatures from dataset1\n",
    "for i in range(1,13):\n",
    "    for j in range(0,5):\n",
    "        fird = str(i)\n",
    "        if len(fird)== 1: fird='0'+fird\n",
    "        temp_img = returnimages(loc+'dataset1/real','0'+fird+'0'+str(j)+'0'+fird+'.png')\n",
    "        real_sign[count_real] = flatten(temp_img)\n",
    "        count_real+=1\n",
    "        #plt.imshow(temp_img,'gray')\n",
    "        #plt.show()\n",
    "\n",
    "# importing 60 forged signatures from dataset1\n",
    "for i in range(1,13):\n",
    "    for j in range(0,5):\n",
    "        fird = '0210'+str(j)\n",
    "        lastd = str(i)\n",
    "        if len(lastd)== 1: lastd='0'+lastd\n",
    "        temp_img = returnimages(loc+'dataset1/forge',fird+'0'+lastd+'.png')\n",
    "        forged_sign[count_forged] = flatten(temp_img)\n",
    "        count_forged+=1\n",
    "        #plt.imshow(temp_img,'gray')\n",
    "        #plt.show()\n",
    "\n",
    "# importing 150 real signatures from dataset2\n",
    "for i in range(1,31):\n",
    "    for j in range(1,6):\n",
    "        fird = str(i)\n",
    "        if len(fird)== 1: fird='0'+fird\n",
    "        temp_img = returnimages(loc+'dataset3/real','0'+fird+'0'+str(j)+'0'+fird+'.png')\n",
    "        real_sign[count_real] = flatten(temp_img)\n",
    "        count_real+=1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.97254902],\n",
       "       [0.97254902],\n",
       "       [0.97254902],\n",
       "       ...,\n",
       "       [0.97647059],\n",
       "       [0.97647059],\n",
       "       [0.97647059]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "real_sign[59]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_var = np.ndarray((1341,2*img_width*img_height))\n",
    "output_var = np.zeros((1341,1))\n",
    "output_var[0:252]=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def findsubs1(x): # set of elements of i to i+5\n",
    "    lis = []\n",
    "    for i in range(x,x+6):\n",
    "        for j in range(i+1,x+5):\n",
    "            lis.append([i,j])\n",
    "    return lis\n",
    "\n",
    "def findsubs2(x): # set of elements of i,i+5...\n",
    "    lis = []\n",
    "    for i in range(x,210,5):\n",
    "        for j in range(i+5,210,5):\n",
    "            lis.append([i,j])\n",
    "    return lis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "counter = 0\n",
    "for i in range(0,210,5):\n",
    "    tmp = findsubs1(i)\n",
    "    for j in tmp:\n",
    "        input_var[counter] = np.append(real_sign[j[0]],real_sign[j[1]])\n",
    "        counter+=1\n",
    "temp = findsubs2(0)\n",
    "\n",
    "for i in temp: # real - other real\n",
    "    input_var[counter] = np.append(real_sign[i[0]],real_sign[i[1]])\n",
    "    counter+=1\n",
    "    \n",
    "for i in range(0,60): # real - forged\n",
    "    input_var[counter] = np.append(real_sign[i],forged_sign[i])\n",
    "    counter+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1341 1341\n"
     ]
    }
   ],
   "source": [
    "print(len(input_var),len(output_var))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_X = np.ndarray((1341,300,150,1))\n",
    "for i in range(0,1341):\n",
    "    train_X[i] = np.reshape(input_var[i],(300,150,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d (Conv2D)              (None, 298, 148, 64)      640       \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 99, 49, 64)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 97, 47, 32)        18464     \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 48, 23, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 46, 21, 16)        4624      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 23, 10, 16)        0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 3680)              0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 800)               2944800   \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 300)               240300    \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 1)                 301       \n",
      "=================================================================\n",
      "Total params: 3,209,129\n",
      "Trainable params: 3,209,129\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = tf.keras.models.Sequential([\n",
    "  tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(300,150,1)),\n",
    "  tf.keras.layers.MaxPooling2D(3, 3),\n",
    "  tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n",
    "  tf.keras.layers.MaxPooling2D(2,2),\n",
    "  tf.keras.layers.Conv2D(16, (3,3), activation='relu'),\n",
    "  tf.keras.layers.MaxPooling2D(2,2),  \n",
    "  tf.keras.layers.Flatten(),\n",
    " #tf.keras.layers.Dense(1000, activation='relu'),\n",
    "  tf.keras.layers.Dense(800, activation='relu'),\n",
    "  \n",
    "  tf.keras.layers.Dense(300, activation='relu'),\n",
    "  tf.keras.layers.Dense(1, activation='sigmoid')\n",
    "])\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 1072 samples, validate on 269 samples\n",
      "Epoch 1/15\n",
      "1072/1072 [==============================] - 16s 15ms/sample - loss: 0.5761 - accuracy: 0.7649 - val_loss: 0.2325 - val_accuracy: 1.0000\n",
      "Epoch 2/15\n",
      "1072/1072 [==============================] - 19s 18ms/sample - loss: 0.5592 - accuracy: 0.7649 - val_loss: 0.2186 - val_accuracy: 1.0000\n",
      "Epoch 3/15\n",
      "1072/1072 [==============================] - 22s 21ms/sample - loss: 0.5257 - accuracy: 0.7752 - val_loss: 0.1606 - val_accuracy: 1.0000\n",
      "Epoch 4/15\n",
      "1072/1072 [==============================] - 23s 21ms/sample - loss: 0.4199 - accuracy: 0.8125 - val_loss: 0.1685 - val_accuracy: 1.0000\n",
      "Epoch 5/15\n",
      "1072/1072 [==============================] - 23s 21ms/sample - loss: 0.3577 - accuracy: 0.8349 - val_loss: 0.6784 - val_accuracy: 0.6580\n",
      "Epoch 6/15\n",
      "1072/1072 [==============================] - 22s 21ms/sample - loss: 0.3953 - accuracy: 0.8144 - val_loss: 0.3366 - val_accuracy: 0.9926\n",
      "Epoch 7/15\n",
      "1072/1072 [==============================] - 23s 21ms/sample - loss: 0.3503 - accuracy: 0.8396 - val_loss: 0.2935 - val_accuracy: 0.9926\n",
      "Epoch 8/15\n",
      "1072/1072 [==============================] - 22s 21ms/sample - loss: 0.3533 - accuracy: 0.8274 - val_loss: 0.2423 - val_accuracy: 1.0000\n",
      "Epoch 9/15\n",
      "1072/1072 [==============================] - 22s 21ms/sample - loss: 0.3650 - accuracy: 0.8377 - val_loss: 0.2857 - val_accuracy: 0.9926\n",
      "Epoch 10/15\n",
      "1072/1072 [==============================] - 23s 21ms/sample - loss: 0.3238 - accuracy: 0.8368 - val_loss: 0.1539 - val_accuracy: 1.0000\n",
      "Epoch 11/15\n",
      "1072/1072 [==============================] - 22s 21ms/sample - loss: 0.2904 - accuracy: 0.8414 - val_loss: 0.1564 - val_accuracy: 0.9442\n",
      "Epoch 12/15\n",
      "1072/1072 [==============================] - 22s 21ms/sample - loss: 0.2428 - accuracy: 0.8741 - val_loss: 0.1103 - val_accuracy: 0.9442\n",
      "Epoch 13/15\n",
      "1072/1072 [==============================] - 22s 21ms/sample - loss: 0.2319 - accuracy: 0.8825 - val_loss: 0.2081 - val_accuracy: 0.8959\n",
      "Epoch 14/15\n",
      "1072/1072 [==============================] - 31s 29ms/sample - loss: 0.1885 - accuracy: 0.9049 - val_loss: 0.3614 - val_accuracy: 0.9145\n",
      "Epoch 15/15\n",
      "1072/1072 [==============================] - 23s 21ms/sample - loss: 0.2627 - accuracy: 0.8955 - val_loss: 0.1365 - val_accuracy: 0.9517\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x1d6783d7948>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(train_X, output_var,validation_split=0.2, epochs=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tensorflow-GPU",
   "language": "python",
   "name": "tensorflow"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
